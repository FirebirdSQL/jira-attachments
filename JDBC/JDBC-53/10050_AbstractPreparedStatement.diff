Index: AbstractPreparedStatement.java
===================================================================
RCS file: /cvsroot/firebird/client-java/src/main/org/firebirdsql/jdbc/AbstractPreparedStatement.java,v
retrieving revision 1.18
diff -u -r1.18 AbstractPreparedStatement.java
--- AbstractPreparedStatement.java	13 Aug 2004 20:08:21 -0000	1.18
+++ AbstractPreparedStatement.java	23 Oct 2004 11:23:58 -0000
@@ -164,56 +164,69 @@
      */
     public void setNull(int parameterIndex, int sqlType) throws  SQLException {
         getField(parameterIndex).setNull();
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setBinaryStream(int parameterIndex, InputStream inputStream,
         int length) throws SQLException
     {
         getField(parameterIndex).setBinaryStream(inputStream, length);
+        isParamSet[parameterIndex - 1] = true;
     }
 	 
     public void setBytes(int parameterIndex, byte[] x) throws SQLException {
         getField(parameterIndex).setBytes(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setBoolean(int parameterIndex, boolean x) throws SQLException {
         getField(parameterIndex).setBoolean(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setByte(int parameterIndex, byte x) throws SQLException {
         getField(parameterIndex).setByte(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setDate(int parameterIndex, Date x) throws SQLException {
         getField(parameterIndex).setDate(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setDouble(int parameterIndex, double x) throws SQLException {
         getField(parameterIndex).setDouble(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setFloat(int parameterIndex, float x) throws SQLException {
         getField(parameterIndex).setFloat(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setInt(int parameterIndex, int x) throws SQLException {
         getField(parameterIndex).setInteger(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setLong(int parameterIndex, long x) throws SQLException {
         getField(parameterIndex).setLong(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setObject(int parameterIndex, Object x) throws SQLException {
         getField(parameterIndex).setObject(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setShort(int parameterIndex, short x) throws SQLException {
         getField(parameterIndex).setShort(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setString(int parameterIndex, String x) throws SQLException {
         getField(parameterIndex).setString(x);
+        isParamSet[parameterIndex - 1] = true;
     }
     
     public void setStringForced(int parameterIndex, String x) throws SQLException {
@@ -222,18 +235,22 @@
             ((FBWorkaroundStringField)field).setStringForced(x);
         else
             field.setString(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setTime(int parameterIndex, Time x) throws SQLException {
         getField(parameterIndex).setTime(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
         getField(parameterIndex).setTimestamp(x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
     public void setBigDecimal(int parameterIndex, BigDecimal x) throws  SQLException {
         getField(parameterIndex).setBigDecimal(x);
+        isParamSet[parameterIndex - 1] = true;
     }
     /**
      * Returns the XSQLVAR structure for the specified column.
@@ -251,7 +268,7 @@
                      "Invalid column index.",
                      FBSQLException.SQL_STATE_INVALID_COLUMN);
             
-         isParamSet[columnIndex-1] = true;
+         //isParamSet[columnIndex-1] = true;
          return fields[columnIndex-1];
     }
 
@@ -277,6 +294,7 @@
         int length) throws  SQLException
     {
         setBinaryStream(parameterIndex, x, length);
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -307,6 +325,7 @@
     public void setUnicodeStream(int parameterIndex, InputStream x,
               int length) throws  SQLException {
         setBinaryStream(parameterIndex, x, length);
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -370,6 +389,7 @@
     public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws  SQLException {
         // Workaround for JBuilder DataSets		 
         setObject(parameterIndex, x);
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -387,7 +407,7 @@
     public void setObject(int parameterIndex, Object x, int targetSqlType) throws  SQLException {
         //well, for now
         setObject(parameterIndex, x);
-
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -458,7 +478,7 @@
         }
 
         if (!canExecute)
-            throw new FBSQLException("Not all parameters were set.");
+            throw new FBMissingParameterException("Not all parameters were set.", isParamSet);
 
         Object syncObject = getSynchronizationObject();
         
@@ -672,6 +692,7 @@
     public void setCharacterStream(int parameterIndex, Reader reader,
               int length) throws  SQLException {
         getField(parameterIndex).setCharacterStream(reader, length);
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -709,6 +730,7 @@
                     FBSQLException.SQL_STATE_INVALID_PARAM_TYPE);
         }
         getField(parameterIndex).setBlob((FBBlob) blob);
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -782,6 +804,7 @@
     public void setDate(int parameterIndex, Date x, Calendar cal)
         throws  SQLException {
         getField(parameterIndex).setDate(x, cal);
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -807,6 +830,7 @@
     public void setTime(int parameterIndex, Time x, Calendar cal)
         throws  SQLException {
         getField(parameterIndex).setTime(x, cal);
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -832,6 +856,7 @@
     public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) 
         throws  SQLException {
         getField(parameterIndex).setTimestamp(x, cal);
+        isParamSet[parameterIndex - 1] = true;
     }
 
 
@@ -867,6 +892,7 @@
      */
      public void setNull (int parameterIndex, int sqlType, String typeName) throws  SQLException {
          setNull(parameterIndex, sqlType); //all nulls are represented the same... a null reference
+         isParamSet[parameterIndex - 1] = true;
     }
      
     /**
Index: FBMissingParameterException.java
===================================================================
RCS file: FBMissingParameterException.java
diff -N FBMissingParameterException.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ FBMissingParameterException.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,50 @@
+/*
+ * Firebird Open Source J2ee connector - jdbc driver
+ *
+ * Distributable under LGPL license.
+ * You may obtain a copy of the License at http://www.gnu.org/copyleft/lgpl.html
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * LGPL License for more details.
+ *
+ * This file was created by members of the firebird development team.
+ * All individual contributions remain the Copyright (C) of those
+ * individuals.  Contributors to this file are either listed here or
+ * can be obtained from a CVS history command.
+ *
+ * All rights reserved.
+ */
+package org.firebirdsql.jdbc;
+
+
+/**
+ * Exception notifying developer that not all parameters were set when calling
+ * the prepared statement.
+ */
+public class FBMissingParameterException extends FBSQLException {
+
+    private boolean[] setParams;
+    
+    /**
+     * @param message
+     */
+    FBMissingParameterException(String message, boolean[] setParams) {
+        super(message);
+        
+        this.setParams = new boolean[setParams.length];
+        System.arraycopy(setParams, 0, this.setParams, 0, setParams.length);
+    }
+    
+    /**
+     * Get information about set parameters.
+     * 
+     * @return array of booleans, each of which corresponds to the parameter
+     * in the prepared statement, its value tells whether parameter was set or
+     * not.
+     */
+    public boolean[] getSetParams() {
+        return setParams;
+    }
+}
