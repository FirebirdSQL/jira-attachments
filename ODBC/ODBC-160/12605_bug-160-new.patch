Index: OdbcConvert.cpp
===================================================================
--- OdbcConvert.cpp	(revision 41)
+++ OdbcConvert.cpp	(revision 42)
@@ -44,6 +44,14 @@
 #ifndef _WINDOWS
 // for Linux
 extern int swprintf (wchar_t *__restrict __s, size_t __n, wchar_t *__restrict __format, ...);
+
+#define HIGH_SURROGATE_START  0xd800
+#define HIGH_SURROGATE_END    0xdbff
+#define LOW_SURROGATE_START   0xdc00
+#define LOW_SURROGATE_END     0xdfff
+#define IS_HIGH_SURROGATE(wch) (((wch) >= HIGH_SURROGATE_START) && ((wch) <= HIGH_SURROGATE_END))
+#define IS_LOW_SURROGATE(wch)  (((wch) >= LOW_SURROGATE_START) && ((wch) <= LOW_SURROGATE_END))
+#define IS_SURROGATE_PAIR(hs, ls) (IS_HIGH_SURROGATE(hs) && IS_LOW_SURROGATE(ls))
 #endif
 
 #ifdef _BIG_ENDIAN // Big endian architectures (IBM PowerPC, Sun Sparc, HP PA-RISC, ... )
@@ -56,6 +64,20 @@
 #define HI_LONG(l)          ((int)(((UQUAD)(l) >> 32) & 0xFFFFFFFF))
 #endif
 
+size_t wcscch(const wchar_t* s, size_t len)
+{
+  size_t ret = len;
+  while (len--)
+  {
+    // we count the high surrogates as usual,
+    // therefore we ignore the low surrogates
+    if (IS_LOW_SURROGATE(*s))
+      ret--;
+    s++;
+  }
+  return ret;
+}
+
 namespace OdbcJdbcLibrary {
 
 unsigned __int64 listScale[19];
@@ -3677,10 +3699,12 @@
 	wchar_t * pointerFrom = (wchar_t *)getAdressBindDataFrom((char*)from->dataPtr);
 
 	SQLINTEGER len;
+	SQLINTEGER cch;
 	SQLINTEGER lenMbs;
 	SQLRETURN ret = SQL_SUCCESS;
 
 	GET_WLEN_FROM_OCTETLENGTHPTR;
+	cch = wcscch(pointerFrom, len);
 
 	if ( !to->isLocalDataPtr )
 	{
@@ -3688,16 +3712,24 @@
 		to->headSqlVarPtr->setSqlData( to->localDataPtr );
 	}
 
-	if ( len + from->dataOffset > to->octetLength )
+	if (from->dataOffset == 0)
+		to->dataOffset = 0;
+
+	if ( cch + from->dataOffset > to->octetLength )
 	{
-		OdbcError *error = parentStmt->postError (new OdbcError (0, "01004", "Data truncated"));
+  		OdbcError *error = parentStmt->postError (new OdbcError (0, "01004", "Data truncated"));
 		ret = SQL_SUCCESS_WITH_INFO;
-		len = to->octetLength - from->dataOffset;
+		do
+		{
+			len--;
+			if (!IS_LOW_SURROGATE(pointerFrom[len-1]))
+				cch--;
+		} while (cch + from->dataOffset > to->octetLength);
 	}
 
 	if ( len < 0 )
 	{
-		len = 0;
+		cch = len = 0;
 		lenMbs = 0;
 	}
 	else
@@ -3705,16 +3737,14 @@
 		wchar_t &wcEnd = *(pointerFrom + len);
 		wchar_t saveEnd = wcEnd;
 		wcEnd = L'\0';	// We guarantee the end L'\0'
-		len = to->octetLength - from->dataOffset;
-		lenMbs = (SQLUINTEGER)to->WcsToMbs( to->localDataPtr + from->dataOffset,
-											pointerFrom,
-											len * to->headSqlVarPtr->getSqlMultiple() );
+		SQLUINTEGER spaceLeft = (to->octetLength - from->dataOffset) * to->headSqlVarPtr->getSqlMultiple();
+		lenMbs = (SQLUINTEGER)to->WcsToMbs( to->localDataPtr + to->dataOffset, pointerFrom, spaceLeft);
 		wcEnd = saveEnd;
 	}
 
 	if ( from->data_at_exec )
 	{
-		from->dataOffset += len;
+		from->dataOffset += cch;
 		to->dataOffset += lenMbs;
 		to->headSqlVarPtr->setSqlLen( (short)to->dataOffset );
 	}
