SET TERM ^;

CREATE OR ALTER PACKAGE PKG_SEQUENCE
AS
BEGIN
  PROCEDURE INITIALIZE(MIN_VALUE INTEGER, MAX_VALUE INTEGER, STEP INTEGER);

  FUNCTION GET_CURRENT_VALUE RETURNS INTEGER;

  FUNCTION NEXT_VALUE RETURNS INTEGER;

  FUNCTION IS_END RETURNS BOOLEAN;
END^

RECREATE PACKAGE BODY PKG_SEQUENCE
AS
BEGIN

  FUNCTION GET_MAX RETURNS INTEGER
  AS
  BEGIN
    RETURN CAST(RDB$GET_CONTEXT('USER_SESSION', 'MAX_VALUE') AS INTEGER);
  END

  FUNCTION SET_MAX(AVALUE INTEGER) RETURNS INTEGER
  AS
  BEGIN
    RDB$SET_CONTEXT('USER_SESSION', 'MAX_VALUE', AVALUE);
    RETURN AVALUE;
  END

  FUNCTION GET_MIN RETURNS INTEGER
  AS
  BEGIN
    RETURN CAST(RDB$GET_CONTEXT('USER_SESSION', 'MIN_VALUE') AS INTEGER);
  END

  FUNCTION SET_MIN(AVALUE INTEGER) RETURNS INTEGER
  AS
  BEGIN
    RDB$SET_CONTEXT('USER_SESSION', 'MIN_VALUE', AVALUE);
    RETURN AVALUE;
  END

  FUNCTION GET_STEP RETURNS INTEGER
  AS
  BEGIN
    RETURN CAST(RDB$GET_CONTEXT('USER_SESSION', 'STEP_VALUE') AS INTEGER);
  END

  FUNCTION SET_STEP(AVALUE INTEGER) RETURNS INTEGER
  AS
  BEGIN
    RDB$SET_CONTEXT('USER_SESSION', 'STEP_VALUE', AVALUE);
    RETURN AVALUE;
  END

  FUNCTION GET_CURRENT_VALUE RETURNS INTEGER
  AS
  BEGIN
    RETURN CAST(RDB$GET_CONTEXT('USER_SESSION', 'CURRENT_VALUE') AS INTEGER);
  END

  FUNCTION SET_CURRENT_VALUE(AVALUE INTEGER) RETURNS INTEGER
  AS
  BEGIN
    RDB$SET_CONTEXT('USER_SESSION', 'CURRENT_VALUE', AVALUE);
    RETURN AVALUE;
  END

  FUNCTION NEXT_VALUE RETURNS INTEGER
  AS
  BEGIN
    IF (NOT IS_END()) THEN
      SET_CURRENT_VALUE(GET_CURRENT_VALUE() + GET_STEP());
    RETURN GET_CURRENT_VALUE();
  END

  FUNCTION IS_END RETURNS BOOLEAN
  AS
  BEGIN
    RETURN GET_CURRENT_VALUE() > GET_MAX();
  END

  PROCEDURE INITIALIZE(MIN_VALUE INTEGER, MAX_VALUE INTEGER, STEP INTEGER)
  AS
  BEGIN
    SET_MIN(MIN_VALUE);
    SET_MAX(MAX_VALUE);
    SET_STEP(STEP);
    SET_CURRENT_VALUE(MIN_VALUE);
  END

END^

EXECUTE BLOCK
RETURNS (
    OUT INTEGER)
AS
BEGIN
  EXECUTE PROCEDURE PKG_SEQUENCE.INITIALIZE(10, 140, 5);
  OUT = PKG_SEQUENCE.GET_CURRENT_VALUE();
  SUSPEND;
  WHILE (NOT PKG_SEQUENCE.IS_END()) DO
  BEGIN
    OUT = PKG_SEQUENCE.NEXT_VALUE();
    SUSPEND;
  END
END^



