diff --git a/src/jrd/jrd.cpp b/src/jrd/jrd.cpp
index 219acee..da7a006 100644
--- a/src/jrd/jrd.cpp
+++ b/src/jrd/jrd.cpp
@@ -6686,6 +6686,9 @@ static THREAD_ENTRY_DECLARE shutdown_thread(THREAD_ENTRY_PARAM arg)
 			engineShutdown = true;
 		}
 
+		// Make sure no sweep is starting
+		TRA_sweep_shutdown();
+
 		HalfStaticArray<Attachment*, 128> attachments;
 
 		{ // scope
diff --git a/src/jrd/tra.cpp b/src/jrd/tra.cpp
index 673da9e..1867180 100644
--- a/src/jrd/tra.cpp
+++ b/src/jrd/tra.cpp
@@ -119,6 +119,41 @@ static const UCHAR sweep_tpb[] =
 };
 
 
+namespace
+{
+	struct SweepLock
+	{
+		SweepLock(MemoryPool&)
+			: database(NULL), shutdown(false)
+		{ }
+
+		void* database;
+		FB_THREAD_ID thd;
+		bool shutdown;
+	};
+	GlobalPtr<SweepLock> sweepLock;
+	GlobalPtr<Mutex> sweepLockMutex;
+}
+
+
+void TRA_sweep_shutdown()
+{
+	for (;;)
+	{
+		MutexEnsureUnlock g(sweepLockMutex);
+		g.enter();
+		sweepLock->shutdown = true;
+
+		if (sweepLock->database)
+		{
+			g.leave();
+			THREAD_SLEEP(1);
+			continue;
+		}
+		break;
+	}
+}
+
 void TRA_attach_request(Jrd::jrd_tra* transaction, Jrd::jrd_req* request)
 {
 	// When request finishes normally transaction reference is not cleared.
@@ -1781,6 +1816,12 @@ void TRA_sweep(thread_db* tdbb)
 	Database* const dbb = tdbb->getDatabase();
 	CHECK_DBB(dbb);
 
+ 	{
+ 		MutexLockGuard g(sweepLockMutex);
+		if (sweepLock->database && sweepLock->thd == getThreadId())
+			sweepLock->database = NULL;
+	}
+
 	if (!dbb->allowSweepRun(tdbb))
 	{
 		dbb->clearSweepFlags(tdbb);
@@ -2723,6 +2764,29 @@ static void start_sweeper(thread_db* tdbb)
 	if (database)
 	{
 		strcpy(database, pszFilename);
+		for (;;)
+		{
+			MutexEnsureUnlock g(sweepLockMutex);
+			g.enter();
+
+			if (sweepLock->shutdown)
+			{
+				// silent return not starting sweep - shutdown in progress
+				gds__free(database);
+				return;
+			}
+
+			if (sweepLock->database)
+			{
+				g.leave();
+				THREAD_SLEEP(1);
+				continue;
+			}
+
+			sweepLock->database = database;
+			break;
+		}
+
 		if (!gds__thread_start(sweep_database, database, THREAD_medium, 0, 0))
 			return;
 
@@ -2749,6 +2813,12 @@ static THREAD_ENTRY_DECLARE sweep_database(THREAD_ENTRY_PARAM database)
  *	Sweep database.
  *
  **************************************/
+ 	{
+ 		MutexLockGuard g(sweepLockMutex);
+		fb_assert(sweepLock->database == database);
+		sweepLock->thd = getThreadId();
+	}
+
 	Firebird::ClumpletWriter dpb(Firebird::ClumpletReader::Tagged, MAX_DPB_SIZE, isc_dpb_version1);
 
 	dpb.insertByte(isc_dpb_sweep, isc_dpb_records);
@@ -2765,12 +2835,18 @@ static THREAD_ENTRY_DECLARE sweep_database(THREAD_ENTRY_PARAM database)
 						&db_handle, dpb.getBufferLength(),
 						reinterpret_cast<const char*>(dpb.getBuffer()));
 
+	gds__free(database);
 	if (db_handle)
 	{
 		isc_detach_database(status_vector, &db_handle);
 	}
 
-	gds__free(database);
+ 	{
+ 		MutexLockGuard g(sweepLockMutex);
+		if (sweepLock->database && sweepLock->thd == getThreadId())
+			sweepLock->database = NULL;
+	}
+
 	return 0;
 }
 
diff --git a/src/jrd/tra_proto.h b/src/jrd/tra_proto.h
index 37f8b06..a693f92 100644
--- a/src/jrd/tra_proto.h
+++ b/src/jrd/tra_proto.h
@@ -64,6 +64,7 @@ void	TRA_update_counters(Jrd::thread_db*, Jrd::Database*);
 int		TRA_wait(Jrd::thread_db*, Jrd::jrd_tra*, SLONG, Jrd::jrd_tra::wait_t);
 void	TRA_attach_request(Jrd::jrd_tra* transaction, Jrd::jrd_req* request);
 void	TRA_detach_request(Jrd::jrd_req* request);
+void	TRA_sweep_shutdown();
 
 #endif // JRD_TRA_PROTO_H
 
diff --git a/src/jrd/vio.cpp b/src/jrd/vio.cpp
index 614a9c1..bebdc56 100644
--- a/src/jrd/vio.cpp
+++ b/src/jrd/vio.cpp
@@ -3003,7 +3003,7 @@ bool VIO_sweep(thread_db* tdbb, jrd_tra* transaction, TraceSweepEvent* traceSwee
 
 	DPM_scan_pages(tdbb);
 
-	// hvlad: restore tdbb->getTransaction() since it can be used later
+	// hvlad: store tdbb->transaction since it can be used later
 	tdbb->setTransaction(transaction);
 
 	record_param rpb;
